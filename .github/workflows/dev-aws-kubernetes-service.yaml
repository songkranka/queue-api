name: "DEV - EKS queue-punthai-backend"

#on:
#  push:
#    branches: [ dev ]
#    paths-ignore:
#      - '**.md'
#      - '.github/workflows/**'
#      - 'k8s_deployment/**'
#      - 'dockerfile'
#  pull_request:
#    branches: [ dev ]
#    paths-ignore:
#      - '**.md'
#      - '.github/workflows/**'
#      - 'k8s_deployment/**'
#      - 'dockerfile'
#  workflow_dispatch:

on: workflow_dispatch

env:
  APP_NAME: ${{ vars.APP_NAME }}
  APP_VERSION: ${{ vars.APP_VERSION }}
  AWS_REGION: "ap-southeast-1"
  AWS_ACCESS_KEY: ${{ secrets.PUNTHAI_DEV_SIT_AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.PUNTHAI_DEV_SIT_AWS_SECRET_KEY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  EKS_CUSTER_NAME: "dev-sit-punthai"
  IMAGE_TAG: ${{ github.run_number }}
  ENV_TAG: "dev"

jobs:
  jobbuild:
    name: "CI Dotnet restore package"
    runs-on: ubuntu-latest  
    steps:
    - name: "Checkout code"
      uses: actions/checkout@v3

    - name: Setup .NET 7
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    # - name: Restore dependencies
    #   run: dotnet restore

    # - name: Build Dot net
    #   run: dotnet build --no-restore

    # - name: Unit Test
    #   run: dotnet test --no-build --verbosity normal
                
  jobecr:
    needs: [jobbuild]
    if: ${{ needs.jobbuild.result == 'success' }}
    name: "Build image to ECR"
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout code"
      uses: actions/checkout@v3

    - name: "Configure AWS credentials"
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.SHARED_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.SHARED_AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: "Login to Amazon ECR"
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Docker Tag and Push
      run: |
        docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.APP_VERSION }}${{ env.IMAGE_TAG }} .
        docker tag ${{ env.ECR_REPOSITORY }}:${{ env.APP_VERSION }}${{ env.IMAGE_TAG }} ${{ env.ECR_REPOSITORY }}:${{ env.APP_VERSION }}${{ env.IMAGE_TAG }}
        docker tag ${{ env.ECR_REPOSITORY }}:${{ env.APP_VERSION }}${{ env.IMAGE_TAG }} ${{ env.ECR_REPOSITORY }}:${{ env.ENV_TAG }}
        docker tag ${{ env.ECR_REPOSITORY }}:${{ env.APP_VERSION }}${{ env.IMAGE_TAG }} ${{ env.ECR_REPOSITORY }}:latest
        docker push ${{ env.ECR_REPOSITORY }}:${{ env.APP_VERSION }}${{ env.IMAGE_TAG }}
        docker push ${{ env.ECR_REPOSITORY }}:${{ env.ENV_TAG }}
        docker push ${{ env.ECR_REPOSITORY }}:latest
      if: success()
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}

  jobkubectl:
    name: "AWS credentials Kubectl"
    runs-on: ubuntu-latest
    needs: [jobecr]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install and configure AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
        if: success()

      - name: Update Kubeconfig
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CUSTER_NAME }}
          aws eks list-clusters

      - name: Image Tag yaml file
        run: |
          echo ${{ needs.jobecr.login-ecr.outputs.registry }} 
          sed -i 's|IMAGE_NAME|${{ needs.jobecr.login-ecr.outputs.registry }}:${{ env.APP_VERSION }}${{ env.IMAGE_TAG }}|g' .github/k8s_deploy/deployment.yaml
          cat .github/k8s_deploy/deployment.yaml

      - name: AKS kubectl apply
        run: |
          kubectl apply -f .github/k8s_deploy/secret.yaml
          kubectl apply -f .github/k8s_deploy/deployment.yaml
          kubectl apply -f .github/k8s_deploy/service.yaml
          kubectl apply -f .github/k8s_deploy/ingress.yaml
          kubectl apply -f .github/k8s_deploy/hpa.yaml
